data <- readRDS("C:/Users/konst/Documents/master_marburg/Semester_01/Umweltmodelierung/Aufgaben/sapflow_tree_all_cluster_sf.rds")
View(data)
sapflow_tree_all_cluster <- readRDS("C:/Users/konst/Documents/master_marburg/Semester_01/Umweltmodelierung/Aufgaben/sapflow_tree_all_cluster_sf.rds")
View(sapflow_tree_all_cluster)
unique(sapflow_tree_all_cluster$pr_arma)
unique(sapflow_tree_all_cluster$species_mode)
str(sapflow_tree_all_cluster)
sapflow_tree_all_cluster <- readRDS("C:/Users/konst/Documents/master_marburg/Semester_01/Umweltmodelierung/Aufgaben/sapflow_tree_all_cluster_sf.rds")
mean_tree <- sapply(sapflow_tree_all_cluster, mean)
sapflow_tree_all_cluster <- readRDS("C:/Users/konst/Documents/master_marburg/Semester_01/Umweltmodelierung/Aufgaben/sapflow_tree_all_cluster_sf.rds")
mean_tree <- sapply(sapflow_tree_all_cluster, mean)
mean_tree
View(sapflow_tree_all_cluster)
mean_tree <- as.data.fram(sapply(sapflow_tree_all_cluster, mean))
mean_tree <- as.data.frame(sapply(sapflow_tree_all_cluster, mean))
View(mean_tree)
View(mean_tree)
mean_tree
mean_tree$`sapply(sapflow_tree_all_cluster, mean)`
mean_tree
# Create a 10x10 matrix filled with zeros
test_matrix <- matrix(0, nrow=10, ncol=10)
# Add 'river' segments
test_matrix[3, 3:8] <- 1  # Horizontal river segment
test_matrix[3:7, 8] <- 1  # Vertical river segment
# Convert the matrix to a SpatRaster
raster <- rast(test_matrix)
library(terra)
# Create a 10x10 matrix filled with zeros
test_matrix <- matrix(0, nrow=10, ncol=10)
# Add 'river' segments
test_matrix[3, 3:8] <- 1  # Horizontal river segment
test_matrix[3:7, 8] <- 1  # Vertical river segment
# Convert the matrix to a SpatRaster
raster <- rast(test_matrix)
plot(raster)
# Step 1: Identify river pixels
river_indices <- which(values(raster) == 1, arr.ind = TRUE)
river_indices
# Initialize an empty matrix or raster to store indices of the nearest river pixel
nearest_river_index <- matrix(NA, nrow=nrow(raster), ncol=ncol(raster))
nearest_river_index
row <- 1
col <-1
raster_matrix[row, col] == 0
# Convert raster to matrix for easier manipulation
raster_matrix <- matrix(values(raster), nrow=nrow(raster), byrow=TRUE)
raster_matrix
raster_matrix[row, col] == 0
# Calculate distances to all river pixels
distances <- sqrt((river_indices[, "row"] - row)^2 + (river_indices[, "col"] - col)^2)
distances
# Find the index of the nearest river pixel
min_distance_index <- which.min(distances)
# Store the index (or a unique identifier) of the nearest river pixel
nearest_river_index[row, col] <- raster_matrix[nearest_river_pixel["row"], nearest_river_pixel["col"]]
nearest_river_pixel <- river_indices[min_distance_index, ]
nearest_river_pixel
# Store the index (or a unique identifier) of the nearest river pixel
nearest_river_index[row, col] <- raster_matrix[nearest_river_pixel["row"], nearest_river_pixel["col"]]
nearest_river_pixel["row"]
raster_matrix[nearest_river_pixel["row"], nearest_river_pixel["col"]]
raster_matrix
# Step 1: Identify river pixels
river_indices <- which(values(raster) == 1, arr.ind = TRUE)
river_indices
# Step 1: Identify river pixels
river_indices <- which(values(raster) == 1, arr.ind = FALSE)
river_indices
library(tensorflow)
tensorflow::tf_version()
library(terra)
relativ_height <- rast("E:/UNI_Master/GeoAI/full_research_area/relative_heights_testing.tif")
relativ_height[relativ_height < 0] <- 0
library(mapview)
mapview(relativ_height)
plot(relativ_height)
library(sf)
library(sf)
library(sf)
line <- read_sf("C:/Users/konst/Downloads/Wege.shp")
# Segmentize: add vertices every 100m
segmentized_line <- st_segmentize(line, units::set_units(100, "meters"))
# Segmentize: add vertices every 100m
segmentized_line <- st_segmentize(line, units::set_units(300, "meters"))
# Convert line to points
points <- st_cast(segmentized_line, "POINT")
plot(points)
plot(points$geometry)
library(sf)
line <- read_sf("C:/Users/konst/Downloads/Wege.shp")
# Segmentize: add vertices every 100m
segmentized_line <- st_segmentize(line, units::set_units(300, "meters"))
# Convert line to points
points <- st_cast(segmentized_line, "POINT")
# Step 3: Export as Shapefile
st_write(points, "C:/Users/konst/Downloads/Wege_points.shp")
line <- st_transform(line, "25832")
line <- st_transform(line, "EPSG:25832")
# Segmentize: add vertices every 100m
segmentized_line <- st_segmentize(line, units::set_units(300, "meters"))
# Convert line to points
points <- st_cast(segmentized_line, "POINT")
# Step 3: Export as Shapefile
st_write(points, "C:/Users/konst/Downloads/Wege_points.shp")
# Step 3: Export as Shapefile
st_write(points, "C:/Users/konst/Downloads/Wege_points.shp", overwrite = TRUE)
# Step 3: Export as Shapefile
st_write(points, "C:/Users/konst/Downloads/Wege_points.shp", overwrite = TRUE)
# Step 3: Export as Shapefile
st_write(points, "C:/Users/konst/Downloads/Wege_points.shp", overwrite = TRUE)
# Step 3: Export as Shapefile
st_write(points, "C:/Users/konst/Downloads/Wege_points.shp", append =TRUE)
setwd("C:/Users/konst/Documents/master_marburg/Websites/Academic_CV")
library(blogdown)
blogdown::build_site()
blogdown::serve_site()
stop_server()
